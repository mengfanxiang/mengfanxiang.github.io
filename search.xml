<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BGP路由协议</title>
      <link href="/2024/09/09/BGP%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE/"/>
      <url>/2024/09/09/BGP%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="BGP路由协议"><a href="#BGP路由协议" class="headerlink" title="BGP路由协议"></a>BGP路由协议</h1><h2 id="BGP概述"><a href="#BGP概述" class="headerlink" title="BGP概述"></a>BGP概述</h2><p>BGP是一种基于策略的距离矢量（路径矢量）协议，它的任务是在AS之间交换路由信息，同时确保没有路由环路。BGP本身不计算发现产生路由，只负责搬运路由。</p><h3 id="BGP路由的特性？"><a href="#BGP路由的特性？" class="headerlink" title="BGP路由的特性？"></a>BGP路由的特性？</h3><ul><li>随着互联网规模的不断扩大，网络被分成了不同的自治系统AS，AS是指由同一个技术管理机构管理，使用统一选路策略的一些路由器的集合。</li><li>路由协议按照工作范围分为IGP（内部网关协议）和EGP（外部网关协议）。</li><li>IGP一般工作在一个自治系统AS内部，用来发现和计算路由，实现AS内部的互访。</li><li>EGP主要工作在AS之间，用来在AS间交换路由信息，实现AS之间的互通。</li><li>早期的EGP特指外部网关协议EGP，但EGP设计的较简单，未考虑路由优选和环路避免。</li><li>边界网关协议BGP是为取代最初的EGP而被设计，具备路由优选、环路避免、高效传递、扩展性好等特点，成为当前最主流的EGP协议。</li><li>AS内部使用IGP来计算和发现路由，如OSPF，ISIS，RIP等。</li><li>AS之间使用BGP来传递和控制路由。</li></ul><h3 id="BGP协议的版本？"><a href="#BGP协议的版本？" class="headerlink" title="BGP协议的版本？"></a>BGP协议的版本？</h3><ul><li>早期发布的三个版本分别是BGP-1、BGP-2和BGP-3。</li><li>1994年开始使用BGP-4，2006年之后单播IPv4网络使用的版本是BGP-4，其他网络（如IPv6等）使用的版本是MP-BGP。</li><li>MP-BGP是对BGP-4的扩展，来达到在不同网络中应用的目的，BGP-4原有的消息机制和路由机制并没有改变。</li><li>MP-BGP在IPv6单播网络上的应用称为BGP4+，在IPv4组播网络上的应用称为MBGP（Multicast BGP）。</li></ul><h2 id="BGP特征"><a href="#BGP特征" class="headerlink" title="BGP特征"></a>BGP特征</h2><h3 id="具备丰富的路径属性"><a href="#具备丰富的路径属性" class="headerlink" title="具备丰富的路径属性"></a>具备丰富的路径属性</h3><ul><li>区别于其他距离矢量协议，BGP衡量路由优劣不是基于距离，而是基于路径属性。</li><li>BGP用属性(attribute)描述路径，这些属性会在路由传递过程中携带，丰富的属性特征方便实现基于策略的路由控制。</li><li>从这个角度来说，BGP是一种增强的距离矢量路由协议，也可称之为路径矢量路由协议。</li><li>例如，BGP路由通过携带AS Path路径属性信息解决路由环路问题。</li></ul><h3 id="工作在应用层，基于TCP"><a href="#工作在应用层，基于TCP" class="headerlink" title="工作在应用层，基于TCP"></a>工作在应用层，基于TCP</h3><ul><li>BGP使用TCP（端口179）作为其传输协议，并通过Keepalive报文来检验TCP的连接。</li><li>由于基于TCP，BGP的邻居建立不要求物理直连（可跨设备），但建立邻居关系的接口之间必须三层互通。</li><li>BGP需要通过IGP或静态路由来提供TCP连接的IP可达性。</li></ul><h3 id="BGP的三张表：BGP邻居表、BGP路由表和IP路由表"><a href="#BGP的三张表：BGP邻居表、BGP路由表和IP路由表" class="headerlink" title="BGP的三张表：BGP邻居表、BGP路由表和IP路由表"></a>BGP的三张表：BGP邻居表、BGP路由表和IP路由表</h3><ul><li>BGP邻居表：邻居清单列表：display bgp peer命令用来查看BGP对等体信息。</li><li>BGP路由表：BGP路由信息库：display bgp routing-table命令用来查看BGP的路由信息。</li><li>IP路由表：全局路由信息库，包括所有IP路由信息：display ip routing-table命令用来查看IPv4路由表的信息。</li></ul><h3 id="具备较高的安全性与稳定性，效率较高、扩展性好"><a href="#具备较高的安全性与稳定性，效率较高、扩展性好" class="headerlink" title="具备较高的安全性与稳定性，效率较高、扩展性好"></a>具备较高的安全性与稳定性，效率较高、扩展性好</h3><ul><li>BGP支持MD5验证和Keychain验证，对BGP邻居关系进行验证是提高安全性的有效手段。</li><li>BGP采用路由聚合和路由衰减防止路由振荡，有效提高了网络的稳定性。</li><li>采用增量更新和触发更新，BGP只发送更新的路由，大大减少了BGP传播路由所占用的带宽，适用于在Internet上传播大量的路由信息。</li><li>BGP易于扩展，能够适应网络新技术的发展。</li></ul><h2 id="BGP术语"><a href="#BGP术语" class="headerlink" title="BGP术语"></a>BGP术语</h2><h3 id="自治系统（AS）"><a href="#自治系统（AS）" class="headerlink" title="自治系统（AS）"></a>自治系统（AS）</h3><ul><li>由同一个技术管理机构管理、使用统一选路策略的一些路由器的集合。</li><li>每个自治系统都有唯一的自治系统编号，用于区分不同的AS，这个编号是由IANA分配的。</li><li>自治系统的编号分为2字节与4字节两种形式，支持4字节AS号的设备兼容2字节。</li><li>2字节AS号范围是从1到65535，其中1到64511是注册的因特网编号，64512到65535是私有网络编号。</li></ul><h3 id="BGP的角色—Speaker和Peer"><a href="#BGP的角色—Speaker和Peer" class="headerlink" title="BGP的角色—Speaker和Peer"></a>BGP的角色—Speaker和Peer</h3><ul><li>BGP报文交互中分为Speaker和Peer两种角色。</li><li>Speaker(发言者)：发送BGP报文的设备称为BGP Speaker，它接收或产生新的报文信息，并发布给其它BGP Speaker。</li><li>Peer(对等体)：相互交换报文的Speaker之间互称对等体（邻居）。</li></ul><h3 id="BGP的邻居类型—EBGP和IGBP"><a href="#BGP的邻居类型—EBGP和IGBP" class="headerlink" title="BGP的邻居类型—EBGP和IGBP"></a>BGP的邻居类型—EBGP和IGBP</h3><ul><li>运行在不同AS之间的BGP路由器建立的邻居关系为EBGP （External BGP）。</li><li>运行在相同AS内的BGP路由器建立的邻居关系为IBGP （Internal BGP）。</li></ul><h2 id="BGP报文类型与邻居建立"><a href="#BGP报文类型与邻居建立" class="headerlink" title="BGP报文类型与邻居建立"></a>BGP报文类型与邻居建立</h2><h3 id="BGP的五种报文类型"><a href="#BGP的五种报文类型" class="headerlink" title="BGP的五种报文类型"></a>BGP的五种报文类型</h3><ul><li>Open：TCP连接建立后发送的第一个报文，用于建立BGP对等体之间的连接关系，包含BGP版本、AS号等信息。</li><li>Keepalive：周期性地发送，用以维护BGP邻居之间的连接。</li><li>Update：当有路由发送或路由更新时，用此消息在BGP对等体之间传递路由信息，既可以发布可达路由，也可以撤销不可达路由。</li><li>Notification：用于差错检测，当BGP Speaker检测到错误的时候，会发送该消息给对等体，同时立刻中断BGP连接。</li><li>Route-refresh：用于在改变路由策略后请求对等体重新发送路由信息，只有支持路由刷新能力的BGP设备会发送和响应此报文。</li></ul><h3 id="在BGP对等体建立的过程中，通常可见的三个状态是：Idle、Active、Established"><a href="#在BGP对等体建立的过程中，通常可见的三个状态是：Idle、Active、Established" class="headerlink" title="在BGP对等体建立的过程中，通常可见的三个状态是：Idle、Active、Established"></a>在BGP对等体建立的过程中，通常可见的三个状态是：Idle、Active、Established</h3><ul><li>Idle状态下，BGP拒绝任何进入的连接请求，是BGP初始状态。</li><li>Active状态下，BGP将尝试进行TCP连接的建立，是BGP的中间状态。</li><li>Established状态下，BGP对等体间可以交换Update报文、Route-refresh报文、Keepalive报文和Notification报文。</li></ul><h3 id="BGP对等体双方的状态必须都为Established，BGP邻居关系才能成立，双方通过Update报文交换路由信息"><a href="#BGP对等体双方的状态必须都为Established，BGP邻居关系才能成立，双方通过Update报文交换路由信息" class="headerlink" title="BGP对等体双方的状态必须都为Established，BGP邻居关系才能成立，双方通过Update报文交换路由信息"></a>BGP对等体双方的状态必须都为Established，BGP邻居关系才能成立，双方通过Update报文交换路由信息</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>isis</title>
      <link href="/2024/05/15/isis/"/>
      <url>/2024/05/15/isis/</url>
      
        <content type="html"><![CDATA[<h1 id="中间系统到中间系统（IS-IS）"><a href="#中间系统到中间系统（IS-IS）" class="headerlink" title="中间系统到中间系统（IS-IS）"></a>中间系统到中间系统（IS-IS）</h1><h3 id="什么是is-is"><a href="#什么是is-is" class="headerlink" title="什么是is-is?"></a>什么是is-is?</h3><p>中间系统到中间系统IS-IS（Intermediate System to Intermediate System），是一种内部网关协议（IGP），用于自治系统内部。</p><p><em>IS-IS最初是国际化标准组织ISO为它的无连接网络协议CLNP设计的一种动态路由协议。后来IETF对IS-IS进行了扩充和修改，使其能够支持IP网络，修订后的IS-IS协议被称为集成化的IS-IS，如无明确说明，本课程IS-IS特指修订后的集成化IS-IS。</em></p><h3 id="is-is协议特性？"><a href="#is-is协议特性？" class="headerlink" title="is-is协议特性？"></a>is-is协议特性？</h3><ul><li>和OSPF一样，IS-IS也是一种<strong>链路状态协议</strong>，维护一个<strong>链路状态数据库LSDB</strong>，使用<strong>最短路径优先算法</strong>（SPF算法）进行路由计算。</li><li>由于IS-IS的简便性及扩展性强的特点，目前在大型ISP的网络中被广泛地部署。</li></ul><p><em>SPF算法，即最短路径优先算法（Shortest Path First），也被称为Dijkstra算法，是由荷兰计算机科学家狄克斯特拉于1959年提出的。</em></p><h3 id="is-is报文类型？"><a href="#is-is报文类型？" class="headerlink" title="is-is报文类型？"></a>is-is报文类型？</h3><p>IS-IS路由协议使用三大类报文：<strong>Hello报文</strong>、<strong>LSP报文</strong>和<strong>SNP报文</strong>，共计9种具体的报文。</p><ol><li>Hello报文：用于建立和维护邻居关系，也称IIH（IS-TO-IS Hello PDUs）<ul><li>广播型网络中使用LAN IIH，Level-1邻居使用Level-1 LAN IIH， Level-2邻居使用Level-2 LAN IIH</li><li>点对点网络使用P2P IIH<br> <em>LAN IIH与P2P IIH在格式上有所不同</em></li></ul></li><li>LSP报文：链路状态报文LSP（Link State PDUs）, 用于交换链路状态信息（相当于OSPF中的LSA），类似于OSPF中的LSU报文。<ul><li>Level-1 LSP：由Level-1 路由器和Level-1-2 路由器传递。</li><li>Level-2 LSP：由Level-2 路由器和Level-1-2 路由器传递。</li></ul></li><li>SNP报文：序列号报文SNP（Sequence Number PDUs），描述全部或部分数据库中的LSP来同步各LSDB, 维护各路由器LSDB的完整与同步。分为全序列号报文CSNP和部分序列号报文PSNP。<ul><li><strong>CSNP</strong>：包含LSDB中所有LSP的摘要信息，用于保持邻居间LSDB的同步，类似于OSPF中的DD报文。分为Level-1 CSNP和Level-2 CSNP，分别用于Level-1邻居和Level-2 邻居的LSDB同步。</li><li><strong>PSNP</strong>：包含部分LSP的摘要信息，用于请求邻居发送所需要的LSP或对收到的LSP进行确认，相当于OSPF中的LSR和LSACK。分为Level-1 PSNP和Level-2 PSNP，分别用于Level-1邻居和Level-2 邻居的LSDB同步。</li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>策略路由（路由重定向）</title>
      <link href="/2024/05/15/%E7%AD%96%E7%95%A5%E8%B7%AF%E7%94%B1%EF%BC%88%E8%B7%AF%E7%94%B1%E9%87%8D%E5%AE%9A%E5%90%91%EF%BC%89/"/>
      <url>/2024/05/15/%E7%AD%96%E7%95%A5%E8%B7%AF%E7%94%B1%EF%BC%88%E8%B7%AF%E7%94%B1%E9%87%8D%E5%AE%9A%E5%90%91%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="策略路由（路由重定向）"><a href="#策略路由（路由重定向）" class="headerlink" title="策略路由（路由重定向）"></a>策略路由（路由重定向）</h1><h2 id="策略路由概述"><a href="#策略路由概述" class="headerlink" title="策略路由概述"></a>策略路由概述</h2><p>策略路由PBR（Policy-Based Routing）是一种依据用户制定的策略进行路由选择的机制。</p><h3 id="策略路由的特性？"><a href="#策略路由的特性？" class="headerlink" title="策略路由的特性？"></a>策略路由的特性？</h3><ul><li>策略路由是<strong>流策略</strong>的一种，有时也称路由重定向</li><li>策略路由的优先级<strong>高于</strong>路由表，被策略路由匹配的报文将按照</li><li>策略规定的下一跳转发，而不再查找路由表</li><li>策略路由通常搭配ACL使用，匹配元素丰富，可将源目的IP、端口号、报文长度、协议类型等作为匹配报文的条件。</li><li>策略路由可增强路由选择的<strong>灵活性</strong>与<strong>可控性</strong>，满足用户的特殊需求</li></ul><h3 id="路由策略与策略路由的区别？"><a href="#路由策略与策略路由的区别？" class="headerlink" title="路由策略与策略路由的区别？"></a>路由策略与策略路由的区别？</h3><table><thead><tr><th>路由策略</th><th>策略路由</th></tr></thead><tbody><tr><td>基于控制平面，会影响路由表表项</td><td>基于转发平面，不会影响路由表表项，且设备收到报文后，会先查找策略路由进行匹配转发，若匹配失败，则再查找路由表进行转发</td></tr><tr><td>只能基于目的地址进行策略制定</td><td>可基于源地址、目的地址、协议类型、报文大小等进行策略制定</td></tr><tr><td>与路由协议结合使用</td><td>需手工逐跳配置，以保证报文按策略进行转发</td></tr><tr><td>常用工具：Route-Policy、Filter-Policy等</td><td>常用工具：Traffic-Filter、Traffic-Policy、Policy-Based-Route等</td></tr></tbody></table><p><em>“路由策略和策略路由是两种不同的概念，在学习时要特别注意”</em></p><ul><li>路由器存在两种类型的表：一个是路由表（routing-table），另一个是转发表（forwarding-table），转发表是由路由表映射过来的，策略路由直接作用于转发表，路由策略直接作用于路由表。由于转发在底层，路由在高层，所以直接作用在转发表的转发优先级比查找路由表转发的优先级高。</li><li>路由策略是在路由发现的时候产生作用，并根据一些规则，使用某种策略来影响路由发布、接收或路由选择的参数，从而改变路由发现的结果，从而最终改变路由表内容；策略路由是在数据包转发的时候发生作用，不改变路由表中的任何内容，它可以通过设置的规则影响数据报文的转发。</li></ul><h3 id="策略路由的分类？"><a href="#策略路由的分类？" class="headerlink" title="策略路由的分类？"></a>策略路由的分类？</h3><ul><li>本地策略路由，仅对<strong>本机下发的报文</strong>进行处理，对转发的报文不起作用</li><li><strong>接口策略路由</strong>，只对<strong>转发的报文</strong>（接口收到的）起作用，对本地下发的报文（比如本地的Ping报文）不起作用。<strong>接口策略路由指定的下一跳地址应属于设备的直连网段，且二层可达</strong>。</li><li>智能策略路由，基于业务需求的策略路由，通过匹配链路质量和网络业务对链路质量的需求，实现智能选路</li></ul><h2 id="接口策略路由的配置与验证"><a href="#接口策略路由的配置与验证" class="headerlink" title="接口策略路由的配置与验证"></a>接口策略路由的配置与验证</h2><p><em>如图所示，配置策略路由，实现PC1访问100.0.0.1走AR1→AR3方向，其他PC访问100.0.0.1走AR1→AR2方向</em></p><p><img src="/assets/celueluyou001.png" alt="拓扑"></p><h3 id="接口策略路由配置步骤？"><a href="#接口策略路由配置步骤？" class="headerlink" title="接口策略路由配置步骤？"></a>接口策略路由配置步骤？</h3><ol><li>配置各接口IP地址，配置AR1的静态路由（配置省略）</li><li>在AR1配置策略路由<ul><li>创建ACL，匹配所需流量</li><li>创建流分类，调用ACL</li><li>创建流行为，指定下一跳（重定向）</li><li>创建流策略，绑定流分类和流行为</li><li>应用流策略</li></ul></li><li>验证配置结果</li></ol><ul><li>配置AR1策略路由：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[AR1]acl 3000                    //创建ACL，匹配所需的流量</span><br><span class="line">[AR1-acl-adv-3000] rule 5 permit ip source 192.168.1.1 0 destination 100.0.0.1 0 </span><br><span class="line">[AR1]traffic classifier PC1      //创建流分类，名称为PC1，并调用ACL</span><br><span class="line">[AR1-classifier-PC1] if-match acl 3000</span><br><span class="line">[AR1]traffic behavior PC1        //创建流行为，名称为PC1，指定下一跳</span><br><span class="line">[AR1-behavior-PC1] redirect ip-nexthop 192.168.13.2</span><br><span class="line">[AR1]traffic policy PC1          //创建流策略，名称为PC1，将流分类与流行为进行绑定</span><br><span class="line">[AR1-trafficpolicy-PC1] classifier PC1 behavior PC1</span><br><span class="line">[AR1]interface GigabitEthernet 0/0/0</span><br><span class="line">[AR1]traffic-policy PC1 inbound   //在接口入方向应用流策略</span><br></pre></td></tr></table></figure></li><li>验证：用PC1、PC2长ping100.0.0.1，对AR1的GE0&#x2F;0&#x2F;1和0&#x2F;0&#x2F;2分别抓包查看流量走向*</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/10/hello-world/"/>
      <url>/2024/05/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
